# -*- coding: utf-8 -*-
"""Scenario Reduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AkXSJDxiRMXNRoT5TFmWSGSDNfQEQRRe
"""

import numpy as np
import pandas as pd
from scipy.stats import norm

#   Reduction FOR profit of stock and bond



s = 500 #SCENARIOS

stockprof_nodes = 1.155*np.random.normal(loc=1, scale=0.1, size=s) #mean of stock profit*rand
bondprof_nodes = 1.13*np.random.normal(loc=1, scale=0.1, size=s) #mean of stock profit*rand
data = pd.DataFrame()
data['1'] = stockprof_nodes
data['2'] = bondprof_nodes
data[(data['1'] > 1) & (data['2'] > 1)] #because it's a rate and it can't be less than one
dist_frame = pd.DataFrame()
dist_frame['dist']=stockprof_nodes[:len(data)]*0
dist_frame['location']=stockprof_nodes[:len(data)]*0

diff = np.ones((1,len(data['1'])))*10


dist_frame['dist'][i] = diff.min()
dist_frame['location'][i] = diff.argmin()

del_total_loc=[]
argmin = dist_frame.idxmin()['dist']
min_loc=data.loc[argmin][0]
min_distance = dist_frame['dist'][argmin]
del_loc = data.loc[argmin][0]
dist_frame.drop(argmin, axis=0, inplace=True)
data.drop(argmin, axis=0, inplace=True)

del_total_loc = [min_loc, min_distance, argmin, del_loc]

pd.DataFrame.reset_index(data, inplace = True)
pd.DataFrame.reset_index(dist_frame, inplace = True)
data = data[['1','2']]
delete = pd.DataFrame(np.reshape(del_total_loc,(1,4)))
#loop for stock
e = 0.5
while(min_distance < e):
    for i in range(len(data['1'])):
        for j in range(len(data['1'])):
            z_func = (data.get_value(i, '1') - data.get_value(j,'1') **2
            if z_func >0   #don't delete the ones with the same number_ because it shows the probability
            diff[j] = z_func 

        dist_frame['dist'][i] = diff.min()
        dist_frame['location'][i] = diff.argmin()

    argmin = dist_frame.idxmin()['dist']
    min_distance = dist_frame['dist'][argmin]
    min_loc = data.loc[argmin][0]
    
    del_loc = dist_frame['location'][argmin]
    del_total_loc = [min_loc, min_distance, argmin, del_loc]
    dist_frame.drop(argmin, axis=0, inplace=True)
    data.drop(argmin, axis=0, inplace=True)

    delete = delete.append(pd.DataFrame(np.reshape(del_total_loc, (1, 4))))

    pd.DataFrame.reset_index(data, inplace=True)
    pd.DataFrame.reset_index(dist_frame, inplace=True)
    i = delete[2].sum()
#loop for saving bond

while(min_distance < e):
    for i in range(len(data['2'])):
        for j in range(len(data['2'])):
            z_func = (data.get_value(i, '2') - data.get_value(j,'2') **2
            if z_func > 0:
                diff[j] = z_func
        dist_frame['dist'][i] = diff.min()
        dist_frame['location'][i] = diff.argmin()

    argmin = dist_frame.idxmin()['dist']
    min_distance = dist_frame['dist'][argmin]
    min_loc = data.loc[argmin][0]
    
    del_loc = dist_frame['location'][argmin]
    del_total_loc = [min_loc, min_distance, argmin, del_loc]
    dist_frame.drop(argmin, axis=0, inplace=True)
    data.drop(argmin, axis=0, inplace=True)

    delete = delete.append(pd.DataFrame(np.reshape(del_total_loc, (1, 4))))

    pd.DataFrame.reset_index(data, inplace=True)
    pd.DataFrame.reset_index(dist_frame, inplace=True)
    i = delete[2].sum()
data.head()


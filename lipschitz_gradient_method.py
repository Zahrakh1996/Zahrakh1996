# -*- coding: utf-8 -*-
"""lipscitz-gradient method.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JhS4Q9XiJ2K_Sck_t1CvELn-8WUsxIA0
"""

import numpy as np

import random

import matplotlib.pyplot as plt

x=np.zeros((50,1))
# iterate through rows
for i in range(len(x)):  
# iterate through columns
 for j in range(len(x[0])):
   x[i][j]=random.gauss(100,50)

A=np.zeros((50,50))
  # iterate through rows
for i in range(len(A)):  
  # iterate through columns
 for j in range(len(A[0])):
   A[i][j]=random.gauss(100,50)

c=np.zeros((50,1))
  # iterate through rows
for i in range(len(c)):  
  # iterate through columns
 for j in range(len(c[0])):
   c[i][j]=random.gauss(100,50)

Q=np.divide(np.matmul(np.transpose(A),A),np.linalg.norm(A))
np.shape(Q)

grad=np.zeros((50,1))
grad = np.matmul(Q,x) + c

k=0
K=[]
Func=[]

while k<=10000:
  k=k+1
  K.append(k)
  L=np.linalg.norm(grad)/np.linalg.norm(x)
  t=1/L
  x = x - np.dot(t,grad)
  grad = np.matmul(Q,x) + c        
  func=(1/2)*(np.matmul(np.matmul(np.transpose(x),Q),x))+np.matmul(np.transpose(c),x)
  np.round(func,2)
  Func.append(func) 
Func=np.reshape(Func,(1,10001))
K=np.reshape(K,(1,10001))
Func=Func.flatten().tolist()
K=K.flatten().tolist()

"""**part 1**"""

print(L)

"""**part 2**"""

plt.plot(K,Func)
plt.show()

"""**part 3**"""

k=0
K=[]
Func=[]

while k<=10000:
  k=k+1
  K.append(k)
  t=1/k
  x = x - np.dot(t,grad)
  grad = np.matmul(Q,x) + c        
  func=(1/2)*(np.matmul(np.matmul(np.transpose(x),Q),x))+np.matmul(np.transpose(c),x)
  Func.append(func)
Func=np.reshape(Func,(1,10001))
K=np.reshape(K,(1,10001))
Func=Func.flatten().tolist()
K=K.flatten().tolist()

plt.plot(K,Func)
plt.show()

